{"version":3,"names":[],"mappings":"","sources":["provider/simulator.js"],"sourcesContent":["import core from './core';\nimport profile from '../profile';\n\nimport _ from 'lodash';\nimport r from 'random-distrib.js';\n\nconst transitions = {\n  machine: {\n    new: {\n      active: {distribution: 'lognormal', a: 2, mu: 0, sigma: 0.5}\n    }\n  }\n};\n\nconst distributions = {\n  lognormal: params => r.lognormal(params.a, params.mu, params.sigma)\n};\n\n\nmodule.exports = () => core(simulator());\n\nfunction simulator() {\n  const state = {\n    nextMachineId: 0,\n    machines: {}\n  };\n\n  const images = {\n    'coreos-alpha': true,\n    'coreos-beta': true,\n    'coreos-stable': true\n  };\n\n  const headers = {\n    'RateLimit-Limit': 5000,\n    'RateLimit-Remaining': 5000,\n    'RateLimit-Reset': new Date().getTime()\n  };\n\n  const response = {headers};\n\n  const {sizes, locations} = profile;\n\n  // This implements part of the `do-wrapper` interface\n  return credentials => {\n    return {\n      dropletsCreateNewDroplet,\n      dropletsDeleteDroplet,\n      dropletsGetAll,\n      account\n    };\n\n    function dropletsCreateNewDroplet(name, location, size, image, options, callback) {\n      ratelimit();\n\n      try {\n        const machine = createMachine(name, location, size, image, options);\n        callback(undefined, [{droplet: machine}, response]);\n      }\n      catch (e) {\n        callback(e);\n      }\n    }\n\n    function dropletsDeleteDroplet(id, callback) {\n      ratelimit();\n\n      const {machines} = state,\n            machine = machines[id];\n\n      if (!machine) {\n        callback(new Error(`No machine with id ${id}`));\n        return;\n      }\n\n      delete machines[id];\n\n      callback(undefined, [{success: true}, response]);\n    }\n\n    function dropletsGetAll(callback) {\n      ratelimit();\n\n      const {machines} = state;\n\n      _.each(machines, updateMachine);\n\n      callback(undefined, [{\n        droplets: _.map(machines, machine => {\n          const {id, name, created_at, networks} = machine,\n                status = 'new';\n\n          return {\n            id,\n            created_at,\n            name,\n            networks,\n            status\n          };\n        })\n      }, response]);\n    }\n\n    function account(callback) {\n      ratelimit();\n\n      if (credentials) callback(undefined, [{account:{droplet_limit:1000}}, response]);\n      else callback(new Error('Credentials not defined!'));\n    }\n\n    function ratelimit() {\n      const remaining = headers['RateLimit-Remaining'];\n      if (remaining === 0) throw new Error('Rate Limit Reached!'); // Should match what DO gives back, currently doesn't\n      headers['RateLimit-Remaining'] = remaining - 1;\n    }\n  };\n\n  function createMachine(name, location, size, image, options) {\n    const {ssh_keys, user_data} = options || {},\n          {machines} = state;\n\n    console.log('Creating machine', arguments);\n\n    if (machines[name]) {\n      throw new Error(`Machine ${name} already exists!`);\n    }\n\n    const sizeProfile = sizes[size];\n    if (!sizeProfile) {\n      throw new Error(`Size ${size} doesn't exist!`);\n    }\n\n    const locationProfile = locations[location];\n    if (!locationProfile) {\n      throw new Error(`Location ${location} doesn't exist!`);\n    }\n\n    const id = state.nextMachineId++,\n          created_at = new Date().getTime(),\n          networks = {v4: [], v6: []};\n\n    const machine = {\n      id,\n      name,\n      memory: sizeProfile.memory,\n      location,\n      size,\n      image,\n      options,\n      networks,\n      created_at,\n      status: 'new'\n    };\n\n    machines[id] = machine;\n\n    return machine;\n  }\n\n  function updateMachine(machine) {\n    if (machine.status === 'new') updateNewMachine(machine);\n    else if (machine.status === 'active');\n\n    return machine;\n  }\n\n  function updateNewMachine(machine) {\n    const transition = transitions.machine.new.active,\n          transitionTime = distributions[transition.distribution](transition) * 1000,\n          sinceCreation = new Date().getTime() - machine.created_at;\n\n    if (transitionTime < sinceCreation) {\n      machine.status = 'active';\n      machine.networks.v4.push({ip_address: '10.0.0.1', netmask: '255.255.255.0', gateway: '10.0.0.0'});\n    }\n  }\n}\n\n/*\ndoMachine {\n  id: 1,\n  name: '',\n  memory: 1,\n  vcpus: 1,\n  disk: 1,\n  locked: false,\n  created_at: '',\n  backups_ids: [],\n  snapshot_ids: [],\n  features: [],\n  region: '',\n  image: {},\n  size {},\n  size_slug: '',\n  networks: {\n    v4: [],\n    v6: []\n  },\n  kernel: {},\n  next_backup_window: {}\n}\n\n*/"],"file":"provider/simulator.js","sourceRoot":"/source/"}